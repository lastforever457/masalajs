export const tasks = [
    {
        id: 1,
        departmentId: 1,
        text: "Argument sifatida ikkita sonni oladigan funksiya yarating va ularning yig‘indisini qaytaring.",
        examples: [
            "addition(3, 2) ➞ 5",
            "addition(-3, -6) ➞ -9",
            "addition(7, 3) ➞ 10",
        ],
        fun_name: "addition(a, b)",
        solved: true,
        check: ["3, 2", "-3, -6", "7, 3"],
        answers: [5, -9, 10],
    },
    {
        id: 2,
        departmentId: 1,
        text: "Berilgan sonning kvadratini qaytaradigan funksiya yarating.",
        examples: ["square(2) ➞ 4", "square(-4) ➞ 16", "square(5) ➞ 25"],
        fun_name: "square(n)",
        solved: false,
        check: ["2", "-4", "5"],
        answers: [4, 16, 25],
    },
    {
        id: 3,
        departmentId: 1,
        text: "Berilgan sonning kubini qaytaradigan funksiya yarating.",
        examples: ["cube(3) ➞ 27", "cube(-2) ➞ -8", "cube(5) ➞ 125"],
        fun_name: "cube(n)",
        solved: false,
        check: ["3", "-2", "5"],
        answers: [27, -8, 125],
    },
    {
        id: 4,
        departmentId: 1,
        text: "Berilgan son musbat bo‘lsa true, aks holda false qaytaradigan funksiya yarating.",
        examples: [
            "isPositive(5) ➞ true",
            "isPositive(-3) ➞ false",
            "isPositive(0) ➞ false",
        ],
        fun_name: "isPositive(n)",
        solved: false,
        check: ["5", "-3", "0"],
        answers: [true, false, false],
    },
    {
        id: 5,
        departmentId: 1,
        text: "Argument sifatida ikkita sonni oladigan va kattasini qaytaradigan funksiya yarating.",
        examples: ["max(4, 7) ➞ 7", "max(10, 2) ➞ 10", "max(5, 5) ➞ 5"],
        fun_name: "max(a, b)",
        solved: false,
        check: ["4, 7", "10, 2", "5, 5"],
        answers: [7, 10, 5],
    },
    {
        id: 6,
        departmentId: 1,
        text: "Argument sifatida sonni oladigan va son juft bo‘lsa true, aks holda false qaytaradigan funksiya yarating.",
        examples: ["isEven(4) ➞ true", "isEven(7) ➞ false", "isEven(0) ➞ true"],
        fun_name: "isEven(n)",
        solved: false,
        check: ["4", "7", "0"],
        answers: [true, false, true],
    },
    {
        id: 7,
        departmentId: 1,
        text: "Berilgan son musbat yoki manfiy bo‘lsa 'musbat' yoki 'manfiy' matnlarini qaytaradigan funksiya yarating.",
        examples: [
            "positiveOrNegative(5) ➞ 'musbat'",
            "positiveOrNegative(-3) ➞ 'manfiy'",
            "positiveOrNegative(0) ➞ 'nol'",
        ],
        fun_name: "positiveOrNegative(n)",
        solved: false,
        check: ["5", "-3", "0"],
        answers: ["musbat", "manfiy", "nol"],
    },
    {
        id: 8,
        departmentId: 1,
        text: "Berilgan sonlar oralig‘idagi barcha sonlarni yig‘indisini qaytaradigan funksiya yarating.",
        examples: [
            "sumRange(1, 5) ➞ 15",
            "sumRange(-2, 2) ➞ 0",
            "sumRange(3, 3) ➞ 3",
        ],
        fun_name: "sumRange(a, b)",
        solved: false,
        check: ["1, 5", "-2, 2", "3, 3"],
        answers: [15, 0, 3],
    },
    {
        id: 9,
        departmentId: 1,
        text: "Berilgan sonning faktorialini qaytaradigan funksiya yarating.",
        examples: [
            "factorial(5) ➞ 120",
            "factorial(3) ➞ 6",
            "factorial(0) ➞ 1",
        ],
        fun_name: "factorial(n)",
        solved: false,
        check: ["5", "3", "0"],
        answers: [120, 6, 1],
    },
    {
        id: 10,
        departmentId: 1,
        text: "Berilgan son tub bo‘lsa true, aks holda false qaytaradigan funksiya yarating.",
        examples: [
            "isPrime(7) ➞ true",
            "isPrime(4) ➞ false",
            "isPrime(13) ➞ true",
        ],
        fun_name: "isPrime(n)",
        solved: false,
        check: ["7", "4", "13"],
        answers: [true, false, true],
    },
    {
        id: 11,
        departmentId: 2,
        text: "Berilgan arraydagi barcha elementlarni yig‘indisini qaytaradigan funksiya yarating.",
        examples: [
            "sumArray([1, 2, 3, 4]) ➞ 10",
            "sumArray([10, -10, 10, -10]) ➞ 0",
            "sumArray([2, 4, 6, 8]) ➞ 20",
        ],
        fun_name: "sumArray(arr)",
        solved: false,
        check: ["[1, 2, 3, 4]", "[10, -10, 10, -10]", "[2, 4, 6, 8]"],
        answers: [10, 0, 20],
    },
    {
        id: 12,
        departmentId: 2,
        text: "Berilgan arraydagi eng katta elementni qaytaradigan funksiya yarating.",
        examples: [
            "maxArray([1, 2, 3, 4]) ➞ 4",
            "maxArray([10, 20, 30, 5]) ➞ 30",
            "maxArray([2, 3, 1, 4]) ➞ 4",
        ],
        fun_name: "maxArray(arr)",
        solved: false,
        check: ["[1, 2, 3, 4]", "[10, 20, 30, 5]", "[2, 3, 1, 4]"],
        answers: [4, 30, 4],
    },
    {
        id: 13,
        departmentId: 2,
        text: "Berilgan arraydagi barcha elementlarni teskari tartibda qaytaradigan funksiya yarating.",
        examples: [
            "reverseArray([1, 2, 3, 4]) ➞ [4, 3, 2, 1]",
            "reverseArray([10, 20, 30]) ➞ [30, 20, 10]",
            "reverseArray([2, 3, 1]) ➞ [1, 3, 2]",
        ],
        fun_name: "reverseArray(arr)",
        solved: false,
        check: ["[1, 2, 3, 4]", "[10, 20, 30]", "[2, 3, 1]"],
        answers: ["[4, 3, 2, 1]", "[30, 20, 10]", "[1, 3, 2]"],
    },
    {
        id: 14,
        departmentId: 2,
        text: "Berilgan arraydagi barcha manfiy sonlarni musbatga o‘zgartiradigan funksiya yarating.",
        examples: [
            "absArray([-1, -2, 3, 4]) ➞ [1, 2, 3, 4]",
            "absArray([-10, 20, -30]) ➞ [10, 20, 30]",
            "absArray([2, -3, -1]) ➞ [2, 3, 1]",
        ],
        fun_name: "absArray(arr)",
        solved: false,
        check: ["[-1, -2, 3, 4]", "[-10, 20, -30]", "[2, -3, -1]"],
        answers: ["[1, 2, 3, 4]", "[10, 20, 30]", "[2, 3, 1]"],
    },
    {
        id: 15,
        departmentId: 2,
        text: "Berilgan arraydagi barcha juft sonlarni qaytaradigan funksiya yarating.",
        examples: [
            "filterEven([1, 2, 3, 4]) ➞ [2, 4]",
            "filterEven([10, 15, 20, 25]) ➞ [10, 20]",
            "filterEven([2, 3, 4, 5]) ➞ [2, 4]",
        ],
        fun_name: "filterEven(arr)",
        solved: false,
        check: ["[1, 2, 3, 4]", "[10, 15, 20, 25]", "[2, 3, 4, 5]"],
        answers: ["[2, 4]", "[10, 20]", "[2, 4]"],
    },
    {
        id: 16,
        departmentId: 2,
        text: "Berilgan arraydagi barcha toq sonlarni qaytaradigan funksiya yarating.",
        examples: [
            "filterOdd([1, 2, 3, 4]) ➞ [1, 3]",
            "filterOdd([10, 15, 20, 25]) ➞ [15, 25]",
            "filterOdd([2, 3, 4, 5]) ➞ [3, 5]",
        ],
        fun_name: "filterOdd(arr)",
        solved: false,
        check: ["[1, 2, 3, 4]", "[10, 15, 20, 25]", "[2, 3, 4, 5]"],
        answers: ["[1, 3]", "[15, 25]", "[3, 5]"],
    },
    {
        id: 17,
        departmentId: 2,
        text: "Berilgan arraydagi barcha elementlarning ko‘paytmasini qaytaradigan funksiya yarating.",
        examples: [
            "productArray([1, 2, 3, 4]) ➞ 24",
            "productArray([10, 20, 30]) ➞ 6000",
            "productArray([2, 3, 4]) ➞ 24",
        ],
        fun_name: "productArray(arr)",
        solved: false,
        check: ["[1, 2, 3, 4]", "[10, 20, 30]", "[2, 3, 4]"],
        answers: [24, 6000, 24],
    },
    {
        id: 18,
        departmentId: 2,
        text: "Berilgan arraydagi elementlar sonini qaytaradigan funksiya yarating.",
        examples: [
            "lengthArray([1, 2, 3, 4]) ➞ 4",
            "lengthArray([10, 20, 30]) ➞ 3",
            "lengthArray([2, 3, 4, 5, 6]) ➞ 5",
        ],
        fun_name: "lengthArray(arr)",
        solved: false,
        check: ["[1, 2, 3, 4]", "[10, 20, 30]", "[2, 3, 4, 5, 6]"],
        answers: [4, 3, 5],
    },
    {
        id: 19,
        departmentId: 2,
        text: "Berilgan arraydagi faqat manfiy sonlarni qaytaradigan funksiya yarating.",
        examples: [
            "filterNegative([1, -2, 3, -4]) ➞ [-2, -4]",
            "filterNegative([10, -20, 30, -5]) ➞ [-20, -5]",
            "filterNegative([2, -3, -1]) ➞ [-3, -1]",
        ],
        fun_name: "filterNegative(arr)",
        solved: false,
        check: ["[1, -2, 3, -4]", "[10, -20, 30, -5]", "[2, -3, -1]"],
        answers: ["[-2, -4]", "[-20, -5]", "[-3, -1]"],
    },
    {
        id: 20,
        departmentId: 2,
        text: "Berilgan arraydagi elementlarni ikkiga ko‘paytiradigan funksiya yarating.",
        examples: [
            "doubleArray([1, 2, 3, 4]) ➞ [2, 4, 6, 8]",
            "doubleArray([10, 20, 30]) ➞ [20, 40, 60]",
            "doubleArray([2, 3, 4]) ➞ [4, 6, 8]",
        ],
        fun_name: "doubleArray(arr)",
        solved: false,
        check: ["[1, 2, 3, 4]", "[10, 20, 30]", "[2, 3, 4]"],
        answers: ["[2, 4, 6, 8]", "[20, 40, 60]", "[4, 6, 8]"],
    },
    {
        id: 21,
        departmentId: 3,
        text: "Berilgan arraydagi barcha elementlarni bir qiymatga ko‘paytiradigan funksiya yarating.",
        examples: [
            "multiplyArray([1, 2, 3, 4], 2) ➞ [2, 4, 6, 8]",
            "multiplyArray([10, 20, 30], 3) ➞ [30, 60, 90]",
            "multiplyArray([2, 3, 4], 4) ➞ [8, 12, 16]",
        ],
        fun_name: "multiplyArray(arr, multiplier)",
        solved: false,
        check: ["[1, 2, 3, 4], 2", "[10, 20, 30], 3", "[2, 3, 4], 4"],
        answers: ["[2, 4, 6, 8]", "[30, 60, 90]", "[8, 12, 16]"],
    },
    {
        id: 22,
        departmentId: 3,
        text: "Berilgan arraydagi barcha elementlarni o‘z-o‘zidan ko‘paytiradigan funksiya yarating.",
        examples: [
            "squareArray([1, 2, 3, 4]) ➞ [1, 4, 9, 16]",
            "squareArray([10, 20, 30]) ➞ [100, 400, 900]",
            "squareArray([2, 3, 4]) ➞ [4, 9, 16]",
        ],
        fun_name: "squareArray(arr)",
        solved: false,
        check: ["[1, 2, 3, 4]", "[10, 20, 30]", "[2, 3, 4]"],
        answers: ["[1, 4, 9, 16]", "[100, 400, 900]", "[4, 9, 16]"],
    },
    {
        id: 23,
        departmentId: 3,
        text: "Berilgan arraydagi faqat musbat sonlarni qaytaradigan funksiya yarating.",
        examples: [
            "filterPositive([-1, 2, -3, 4]) ➞ [2, 4]",
            "filterPositive([10, -20, 30, -5]) ➞ [10, 30]",
            "filterPositive([-2, 3, -1]) ➞ [3]",
        ],
        fun_name: "filterPositive(arr)",
        solved: false,
        check: ["[-1, 2, -3, 4]", "[10, -20, 30, -5]", "[-2, 3, -1]"],
        answers: ["[2, 4]", "[10, 30]", "[3]"],
    },
    {
        id: 24,
        departmentId: 3,
        text: "Berilgan arraydagi faqat nollarni o‘z ichiga olgan arrayni qaytaradigan funksiya yarating.",
        examples: [
            "filterZeros([0, 1, 2, 0, 3]) ➞ [0, 0]",
            "filterZeros([10, 0, 0, -5]) ➞ [0, 0]",
            "filterZeros([0, 0, 0]) ➞ [0, 0, 0]",
        ],
        fun_name: "filterZeros(arr)",
        solved: false,
        check: ["[0, 1, 2, 0, 3]", "[10, 0, 0, -5]", "[0, 0, 0]"],
        answers: ["[0, 0]", "[0, 0]", "[0, 0, 0]"],
    },
    {
        id: 25,
        departmentId: 3,
        text: "Berilgan arraydagi har bir elementga nollar qo‘shadigan funksiya yarating.",
        examples: [
            "addZeros([1, 2, 3, 4]) ➞ [10, 20, 30, 40]",
            "addZeros([10, 20, 30]) ➞ [100, 200, 300]",
            "addZeros([2, 3, 4]) ➞ [20, 30, 40]",
        ],
        fun_name: "addZeros(arr)",
        solved: false,
        check: ["[1, 2, 3, 4]", "[10, 20, 30]", "[2, 3, 4]"],
        answers: ["[10, 20, 30, 40]", "[100, 200, 300]", "[20, 30, 40]"],
    },
    {
        id: 26,
        departmentId: 3,
        text: "Berilgan arraydagi elementlarni tartiblangan holatda qaytaradigan funksiya yarating.",
        examples: [
            "sortArray([4, 2, 1, 3]) ➞ [1, 2, 3, 4]",
            "sortArray([30, 20, 10]) ➞ [10, 20, 30]",
            "sortArray([3, 2, 1]) ➞ [1, 2, 3]",
        ],
        fun_name: "sortArray(arr)",
        solved: false,
        check: ["[4, 2, 1, 3]", "[30, 20, 10]", "[3, 2, 1]"],
        answers: ["[1, 2, 3, 4]", "[10, 20, 30]", "[1, 2, 3]"],
    },
    {
        id: 27,
        departmentId: 3,
        text: "Berilgan arraydagi eng kichik elementni qaytaradigan funksiya yarating.",
        examples: [
            "minArray([4, 2, 1, 3]) ➞ 1",
            "minArray([30, 20, 10]) ➞ 10",
            "minArray([3, 2, 1]) ➞ 1",
        ],
        fun_name: "minArray(arr)",
        solved: false,
        check: ["[4, 2, 1, 3]", "[30, 20, 10]", "[3, 2, 1]"],
        answers: [1, 10, 1],
    },
    {
        id: 28,
        departmentId: 3,
        text: "Berilgan arraydagi elementlarning o‘rtacha qiymatini qaytaradigan funksiya yarating.",
        examples: [
            "averageArray([4, 2, 1, 3]) ➞ 2.5",
            "averageArray([30, 20, 10]) ➞ 20",
            "averageArray([3, 2, 1]) ➞ 2",
        ],
        fun_name: "averageArray(arr)",
        solved: false,
        check: ["[4, 2, 1, 3]", "[30, 20, 10]", "[3, 2, 1]"],
        answers: [2.5, 20, 2],
    },
    {
        id: 29,
        departmentId: 3,
        text: "Berilgan arraydagi bir xil qiymatlarga ega elementlarni olib tashlaydigan funksiya yarating.",
        examples: [
            "removeDuplicates([1, 2, 2, 3]) ➞ [1, 2, 3]",
            "removeDuplicates([10, 10, 20, 30]) ➞ [10, 20, 30]",
            "removeDuplicates([2, 3, 3, 4]) ➞ [2, 3, 4]",
        ],
        fun_name: "removeDuplicates(arr)",
        solved: false,
        check: ["[1, 2, 2, 3]", "[10, 10, 20, 30]", "[2, 3, 3, 4]"],
        answers: ["[1, 2, 3]", "[10, 20, 30]", "[2, 3, 4]"],
    },
    {
        id: 30,
        departmentId: 3,
        text: "Berilgan arraydagi barcha elementlarni ikki barobarga oshiradigan funksiya yarating.",
        examples: [
            "doubleElements([1, 2, 3, 4]) ➞ [2, 4, 6, 8]",
            "doubleElements([10, 20, 30]) ➞ [20, 40, 60]",
            "doubleElements([2, 3, 4]) ➞ [4, 6, 8]",
        ],
        fun_name: "doubleElements(arr)",
        solved: false,
        check: ["[1, 2, 3, 4]", "[10, 20, 30]", "[2, 3, 4]"],
        answers: ["[2, 4, 6, 8]", "[20, 40, 60]", "[4, 6, 8]"],
    },
    {
        id: 31,
        departmentId: 4,
        text: "Berilgan matnni katta harflar bilan qaytaradigan funksiya yarating.",
        examples: [
            "toUpperCase('hello') ➞ 'HELLO'",
            "toUpperCase('world') ➞ 'WORLD'",
            "toUpperCase('javascript') ➞ 'JAVASCRIPT'",
        ],
        fun_name: "toUpperCase(str)",
        solved: false,
        check: ["'hello'", "'world'", "'javascript'"],
        answers: ["'HELLO'", "'WORLD'", "'JAVASCRIPT'"],
    },
    {
        id: 32,
        departmentId: 4,
        text: "Berilgan matnni kichik harflar bilan qaytaradigan funksiya yarating.",
        examples: [
            "toLowerCase('HELLO') ➞ 'hello'",
            "toLowerCase('WORLD') ➞ 'world'",
            "toLowerCase('JAVASCRIPT') ➞ 'javascript'",
        ],
        fun_name: "toLowerCase(str)",
        solved: false,
        check: ["'HELLO'", "'WORLD'", "'JAVASCRIPT'"],
        answers: ["'hello'", "'world'", "'javascript'"],
    },
    {
        id: 33,
        departmentId: 4,
        text: "Berilgan matnning uzunligini qaytaradigan funksiya yarating.",
        examples: [
            "stringLength('hello') ➞ 5",
            "stringLength('world') ➞ 5",
            "stringLength('javascript') ➞ 10",
        ],
        fun_name: "stringLength(str)",
        solved: false,
        check: ["'hello'", "'world'", "'javascript'"],
        answers: [5, 5, 10],
    },
    {
        id: 34,
        departmentId: 4,
        text: "Berilgan matnni teskari tartibda qaytaradigan funksiya yarating.",
        examples: [
            "reverseString('hello') ➞ 'olleh'",
            "reverseString('world') ➞ 'dlrow'",
            "reverseString('javascript') ➞ 'tpircsavaj'",
        ],
        fun_name: "reverseString(str)",
        solved: false,
        check: ["'hello'", "'world'", "'javascript'"],
        answers: ["'olleh'", "'dlrow'", "'tpircsavaj'"],
    },
    {
        id: 35,
        departmentId: 4,
        text: "Berilgan matnda a harfi necha marta qatnashganini qaytaradigan funksiya yarating.",
        examples: [
            "countA('banana') ➞ 3",
            "countA('apple') ➞ 1",
            "countA('javascript') ➞ 2",
        ],
        fun_name: "countA(str)",
        solved: false,
        check: ["'banana'", "'apple'", "'javascript'"],
        answers: [3, 1, 2],
    },
    {
        id: 36,
        departmentId: 4,
        text: "Berilgan matnning boshidan va oxiridan bo‘sh joylarni olib tashlaydigan funksiya yarating.",
        examples: [
            "trimString('  hello  ') ➞ 'hello'",
            "trimString(' world ') ➞ 'world'",
            "trimString(' javascript ') ➞ 'javascript'",
        ],
        fun_name: "trimString(str)",
        solved: false,
        check: ["'  hello  '", "' world '", "' javascript '"],
        answers: ["'hello'", "'world'", "'javascript'"],
    },
    {
        id: 37,
        departmentId: 4,
        text: "Berilgan matnning barcha so‘zlarining bosh harflarini katta qilib qaytaradigan funksiya yarating.",
        examples: [
            "capitalizeWords('hello world') ➞ 'Hello World'",
            "capitalizeWords('javascript is fun') ➞ 'Javascript Is Fun'",
            "capitalizeWords('capitalize these words') ➞ 'Capitalize These Words'",
        ],
        fun_name: "capitalizeWords(str)",
        solved: false,
        check: [
            "'hello world'",
            "'javascript is fun'",
            "'capitalize these words'",
        ],
        answers: [
            "'Hello World'",
            "'Javascript Is Fun'",
            "'Capitalize These Words'",
        ],
    },
    {
        id: 38,
        departmentId: 4,
        text: "Berilgan matndagi barcha so‘zlarni bo‘sh joylar bilan ajratib array holatiga keltiradigan funksiya yarating.",
        examples: [
            "splitWords('hello world') ➞ ['hello', 'world']",
            "splitWords('javascript is fun') ➞ ['javascript', 'is', 'fun']",
            "splitWords('split these words') ➞ ['split', 'these', 'words']",
        ],
        fun_name: "splitWords(str)",
        solved: false,
        check: ["'hello world'", "'javascript is fun'", "'split these words'"],
        answers: [
            ["hello", "world"],
            ["javascript", "is", "fun"],
            ["split", "these", "words"],
        ],
    },
    {
        id: 39,
        departmentId: 4,
        text: "Berilgan matnda birinchi uchragan so‘z 'the' bo‘lsa true, aks holda false qaytaradigan funksiya yarating.",
        examples: [
            "startsWithThe('the quick brown fox') ➞ true",
            "startsWithThe('quick the brown fox') ➞ false",
            "startsWithThe('the') ➞ true",
        ],
        fun_name: "startsWithThe(str)",
        solved: false,
        check: ["'the quick brown fox'", "'quick the brown fox'", "'the'"],
        answers: [true, false, true],
    },
    {
        id: 40,
        departmentId: 4,
        text: "Berilgan matnda so‘zlarni a harfiga ko‘ra saralaydigan funksiya yarating.",
        examples: [
            "sortWordsByA(['apple', 'banana', 'cherry']) ➞ ['banana', 'apple', 'cherry']",
            "sortWordsByA(['a', 'aa', 'aaa']) ➞ ['aaa', 'aa', 'a']",
            "sortWordsByA(['abc', 'acb', 'bac']) ➞ ['abc', 'acb', 'bac']",
        ],
        fun_name: "sortWordsByA(arr)",
        solved: false,
        check: [
            "['apple', 'banana', 'cherry']",
            "['a', 'aa', 'aaa']",
            "['abc', 'acb', 'bac']",
        ],
        answers: [
            ["banana", "apple", "cherry"],
            ["aaa", "aa", "a"],
            ["abc", "acb", "bac"],
        ],
    },
    {
        id: 41,
        departmentId: 5,
        text: "Berilgan matnda faqat unli harflarni olib tashlaydigan funksiya yarating.",
        examples: [
            "removeVowels('hello') ➞ 'hll'",
            "removeVowels('world') ➞ 'wrld'",
            "removeVowels('javascript') ➞ 'jvscrpt'",
        ],
        fun_name: "removeVowels(str)",
        solved: false,
        check: ["'hello'", "'world'", "'javascript'"],
        answers: ["'hll'", "'wrld'", "'jvscrpt'"],
    },
    {
        id: 42,
        departmentId: 5,
        text: "Berilgan matndagi harflarni alfavit tartibida qaytaradigan funksiya yarating.",
        examples: [
            "sortString('hello') ➞ 'ehllo'",
            "sortString('world') ➞ 'dlorw'",
            "sortString('javascript') ➞ 'aacijprstv'",
        ],
        fun_name: "sortString(str)",
        solved: false,
        check: ["'hello'", "'world'", "'javascript'"],
        answers: ["'ehllo'", "'dlorw'", "'aacijprstv'"],
    },
    {
        id: 43,
        departmentId: 5,
        text: "Berilgan matndagi har bir so‘zning bosh harfini katta qilib qaytaradigan funksiya yarating.",
        examples: [
            "capitalizeEachWord('hello world') ➞ 'Hello World'",
            "capitalizeEachWord('javascript is fun') ➞ 'Javascript Is Fun'",
            "capitalizeEachWord('capitalize each word') ➞ 'Capitalize Each Word'",
        ],
        fun_name: "capitalizeEachWord(str)",
        solved: false,
        check: [
            "'hello world'",
            "'javascript is fun'",
            "'capitalize each word'",
        ],
        answers: [
            "'Hello World'",
            "'Javascript Is Fun'",
            "'Capitalize Each Word'",
        ],
    },
    {
        id: 44,
        departmentId: 5,
        text: "Berilgan matndagi so‘zlar sonini qaytaradigan funksiya yarating.",
        examples: [
            "wordCount('hello world') ➞ 2",
            "wordCount('javascript is fun') ➞ 3",
            "wordCount('count the words') ➞ 3",
        ],
        fun_name: "wordCount(str)",
        solved: false,
        check: ["'hello world'", "'javascript is fun'", "'count the words'"],
        answers: [2, 3, 3],
    },
    {
        id: 45,
        departmentId: 5,
        text: "Berilgan matnda berilgan so‘z necha marta qatnashganini qaytaradigan funksiya yarating.",
        examples: [
            "wordFrequency('hello world hello', 'hello') ➞ 2",
            "wordFrequency('javascript is fun, fun is javascript', 'fun') ➞ 2",
            "wordFrequency('count the words, count', 'count') ➞ 2",
        ],
        fun_name: "wordFrequency(str, word)",
        solved: false,
        check: [
            "'hello world hello', 'hello'",
            "'javascript is fun, fun is javascript', 'fun'",
            "'count the words, count', 'count'",
        ],
        answers: [2, 2, 2],
    },
    {
        id: 46,
        departmentId: 5,
        text: "Berilgan matnda takrorlanmaydigan birinchi harfni qaytaradigan funksiya yarating.",
        examples: [
            "firstUniqueChar('hello') ➞ 'h'",
            "firstUniqueChar('world') ➞ 'w'",
            "firstUniqueChar('javascript') ➞ 'j'",
        ],
        fun_name: "firstUniqueChar(str)",
        solved: false,
        check: ["'hello'", "'world'", "'javascript'"],
        answers: ["'h'", "'w'", "'j'"],
    },
    {
        id: 47,
        departmentId: 5,
        text: "Berilgan matndagi eng uzun so‘zni qaytaradigan funksiya yarating.",
        examples: [
            "longestWord('hello world') ➞ 'world'",
            "longestWord('javascript is fun') ➞ 'javascript'",
            "longestWord('find the longest word') ➞ 'longest'",
        ],
        fun_name: "longestWord(str)",
        solved: false,
        check: [
            "'hello world'",
            "'javascript is fun'",
            "'find the longest word'",
        ],
        answers: ["'world'", "'javascript'", "'longest'"],
    },
    {
        id: 48,
        departmentId: 5,
        text: "Berilgan matndagi har bir so‘zni teskari tartibda qaytaradigan funksiya yarating.",
        examples: [
            "reverseEachWord('hello world') ➞ 'olleh dlrow'",
            "reverseEachWord('javascript is fun') ➞ 'tpircsavaj si nuf'",
            "reverseEachWord('reverse each word') ➞ 'esrever hcae drow'",
        ],
        fun_name: "reverseEachWord(str)",
        solved: false,
        check: ["'hello world'", "'javascript is fun'", "'reverse each word'"],
        answers: [
            "'olleh dlrow'",
            "'tpircsavaj si nuf'",
            "'esrever hcae drow'",
        ],
    },
    {
        id: 49,
        departmentId: 5,
        text: "Berilgan matndagi faqat harflardan iborat qismini qaytaradigan funksiya yarating.",
        examples: [
            "extractLetters('hello123') ➞ 'hello'",
            "extractLetters('world!') ➞ 'world'",
            "extractLetters('javascript_2023') ➞ 'javascript'",
        ],
        fun_name: "extractLetters(str)",
        solved: false,
        check: ["'hello123'", "'world!'", "'javascript_2023'"],
        answers: ["'hello'", "'world'", "'javascript'"],
    },
    {
        id: 50,
        departmentId: 5,
        text: "Berilgan matnda so‘zlarni faqat a harfiga ko‘ra tartiblaydigan funksiya yarating.",
        examples: [
            "sortWordsByA(['apple', 'banana', 'cherry']) ➞ ['banana', 'apple', 'cherry']",
            "sortWordsByA(['a', 'aa', 'aaa']) ➞ ['aaa', 'aa', 'a']",
            "sortWordsByA(['abc', 'acb', 'bac']) ➞ ['abc', 'acb', 'bac']",
        ],
        fun_name: "sortWordsByA(arr)",
        solved: false,
        check: [
            "['apple', 'banana', 'cherry']",
            "['a', 'aa', 'aaa']",
            "['abc', 'acb', 'bac']",
        ],
        answers: [
            ["banana", "apple", "cherry"],
            ["aaa", "aa", "a"],
            ["abc", "acb", "bac"],
        ],
    },
    {
        id: 51,
        departmentId: 6,
        text: "Fibonachchi ketma-ketligining n-chi elementini qaytaradigan rekursiv funksiya yarating.",
        examples: ["fibonacci(0) ➞ 0", "fibonacci(1) ➞ 1", "fibonacci(6) ➞ 8"],
        fun_name: "fibonacci(n)",
        solved: false,
        check: ["0", "1", "6"],
        answers: [0, 1, 8],
    },
    {
        id: 52,
        departmentId: 6,
        text: "Berilgan sonning faktorialini qaytaradigan rekursiv funksiya yarating.",
        examples: [
            "factorial(5) ➞ 120",
            "factorial(3) ➞ 6",
            "factorial(0) ➞ 1",
        ],
        fun_name: "factorial(n)",
        solved: false,
        check: ["5", "3", "0"],
        answers: [120, 6, 1],
    },
    {
        id: 53,
        departmentId: 6,
        text: "Berilgan massivdagi elementlarni rekursiv tarzda yig‘indisini qaytaradigan funksiya yarating.",
        examples: [
            "sumArray([1, 2, 3, 4]) ➞ 10",
            "sumArray([10, -10, 10, -10]) ➞ 0",
            "sumArray([2, 4, 6, 8]) ➞ 20",
        ],
        fun_name: "sumArray(arr)",
        solved: false,
        check: ["[1, 2, 3, 4]", "[10, -10, 10, -10]", "[2, 4, 6, 8]"],
        answers: [10, 0, 20],
    },
];
